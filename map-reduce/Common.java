package com.qihu.rank.common;

import java.nio.ByteBuffer;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Common {

    public static final String CTRL_A = "\u0001";
    public static final String CTRL_B = "\u0002";
    public static final String CTRL_C = "\u0003";
    public static final String CTRL_D = "\u0004";
    public static final String CTRL_E = "\u0005";
    public static final String CTRL_F = "\u0006";
    public static final String CTRL_G = "\u0007";

    public static final int MAX_AD_COUNT_OUTPUT = 10000;

    public static final int MAX_AD_COUNT_INPUT = 10000;
//    public static final int MAX_AD_COUNT_INPUT = 100000;


    public static final String DATE_STR = CTRL_A + "my_date" + CTRL_A;
    public static final String PV_CLICK_LOG = "/home/hdp-guanggao/keyword_search/pv_click_log/" + DATE_STR;
    public static final String SAMPLING_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/sample";
    public static final String JOIN_STEP1_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/join_1";
    public static final String JOIN_STEP2_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/join_2";
    public static final String GBDT_JOIN_STEP1_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/gbdt_join_1";
    public static final String GBDT_JOIN_STEP2_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/gbdt_join_2";
    public static final String QUERY_BID_JOIN_STEP1_OUTPUT = "/home/hdp-guanggao/user/nixingliang/match/" + DATE_STR + "/query_bid_husky_join_1";
    public static final String QUERY_BID_JOIN_STEP2_OUTPUT = "/home/hdp-guanggao/user/nixingliang/match/" + DATE_STR + "/query_bid_husky_join_2";
    public static final String QUERY_BID_JOIN_SHUFFLE_OUTPUT = "/home/hdp-guanggao/user/nixingliang/match/" + DATE_STR + "/query_bid_husky_join_shuffle";

    public static final String QUERY_BID_AD_JOIN_STEP1_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/query_bid_ad_join_1";
    public static final String QUERY_BID_AD_JOIN_STEP2_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/query_bid_ad_join_2";

    public static final String QUERY_BID_UNIQUE_ADGROUP_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/query_bid_adgroup_unique";

    public static final String QUERY_BID_AD_ID_JOIN_STEP1_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/query_bid_ad_id_join_1";
    public static final String QUERY_BID_AD_ID_JOIN_STEP2_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/query_bid_ad_id_join_2";

    public static final String GROUP_AD_MERGE_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/group_ad_merge";

//    public static final String QUERY_BID_AD_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/query_bid_ad";

    public static final String PREDICT_JOIN_STEP1_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/predict_join_1";
    public static final String PREDICT_JOIN_STEP2_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/predict_join_2";

    public static final String PREDICT_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/predict";

    public static final String FG_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/feature";
    public static final String FG_FTRL_OUTPUT = "/home/hdp-guanggao/user/muyixiang/pctr6/offline/feature/feature_magi/" + DATE_STR;
    public static final String ID_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/id";
    public static final String DICT_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/dict";
    public static final String BID_DATA = "/home/hdp-guanggao/hive/mba_data_external/platform_ba_dj_ad_search_keywords/ba_create_date=" + DATE_STR;
    public static final String AD_DATA = "/home/hdp-guanggao/hive/mba_data_external/platform_ba_dj_ad_advert/ba_create_date=" + DATE_STR;
    public static final String BID_MERGE_OUTPUT = "/home/hdp-guanggao/user/nixingliang/" + DATE_STR + "/merge";

    public static final String AD_TERM_OUTPUT = "/home/hdp-guanggao/user/muyixiang/pctr6/offline/feature/pb_feature_ad/" + DATE_STR;
    public static final String QUERY_TERM_OUTPUT = "/home/hdp-guanggao/user/muyixiang/pctr6/offline/feature/pb_feature_query/" + DATE_STR;
    public static final String BIDWORD_TERM_OUTPUT = "/home/hdp-guanggao/user/muyixiang/pctr6/offline/feature/pb_feature_bidword/" + DATE_STR;
    public static final String TOP_QUERY_OUTPUT = "/home/hdp-guanggao/project/MAGI/query";
    public static final String TOP_QUERY_BID_OUTPUT = "/home/hdp-guanggao/project/MAGI/query_bidword";
    public static final String TOP_QUERY_BID_OUTPUT2 = "/home/hdp-guanggao/project/MAGI/query_bidword_20160314";


    public static final String TOP_QUERY_PATH = "com.qihu.rank.topquery";

    public static final String TOTAL_DAY_COUNT_STR = "com.qihu.rank.total_day_count";

    public static final int JOIN_AD_TERM = 1;
    public static final int JOIN_QUERY_TERM = 2;
    public static final int JOIN_BIDWORD_TERM = 3;
    public static final int JOIN_TOP_QUERY = 4;
    public static final int JOIN_AD_DETAIL = 4;
    public static final int JOIN_BIDWORD_AD = 1;
    public static final int JOIN_ADGROUP_AD = 1;
    public static final int MAX_BASE64_LEN = 1024;
    public final static HashSet<String> STOPWORD = new HashSet<String>();
    public final static HashSet<String> CITYWORD = new HashSet<String>();
    private final static char[] ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
            .toCharArray();

    private final static float[][] LSH_VECTORS = new float[][]{{-0.5255157f, -0.12548488f, -0.47748435f, -0.43921566f, 0.3931073f, 0.9484878f, -0.05364245f, -0.94531065f, 0.07891834f, -0.33131868f, 0.944699f, 0.28446162f, 0.5229059f, -0.05746448f, -0.2556538f, 0.10948461f, -0.27045763f, 0.17756635f, 0.5231919f, -0.5275061f, 0.03950411f, 0.30198413f, 0.8395915f, -0.25279427f, -0.45387346f, 0.9273484f, -0.5495663f, -0.6291021f, -0.025070548f, -0.81702524f, -0.6281049f, -0.5087354f, 0.30548692f, -0.24155712f, -0.89131486f, 0.08981609f, 0.6331138f, -0.5775212f, -0.3924753f, 0.33372003f, -0.041154683f, -0.36188316f, -0.71194637f, -0.5114263f, -0.7155014f, -0.40380496f, 0.3622796f, 0.76052135f, 0.84886014f, -0.9669984f, 0.1988191f, -0.27386093f, 0.8623817f, -0.3531006f, 0.5512769f, 0.88639987f, -0.7439737f, -0.44017696f, -0.77321374f, 0.3784569f, 0.68703955f, 0.8603443f, -0.04404968f, 0.7716908f, -0.30421203f, 0.5366357f, -0.5521756f, -0.25832087f, 0.4377175f, 0.24161428f, -0.6379307f, 0.17463356f, -0.99132884f, -0.6888746f, -0.08165848f, 0.6065734f, 0.26843375f, -0.42345256f, -0.48474628f, -0.79822606f, -0.016567528f, -0.43829972f, 0.6105011f, 0.5232577f, 0.75082743f, 0.011358559f, -0.6269086f, 0.9748832f, 0.95690763f, -0.7314085f, 0.42476732f, 0.53169405f, 0.4590636f, 0.060736835f, 0.57238656f, -0.9646828f, -0.5791353f, 0.068819284f, 0.011980712f, 0.2650618f, 0.7098279f, -0.16357917f, -0.3030877f, 0.29297835f, -0.5787707f, 0.7454269f, 0.07478666f, -0.87398887f, 0.7894435f, 0.7141632f, 0.36118203f, -0.8031611f, 0.19088173f, -0.6699643f, 0.66357064f, 0.45593143f, 0.2501402f, 0.46704793f, 0.9078988f, -0.35035253f, 0.87981683f, 0.5022528f, -0.9475664f, -0.05712408f, -0.10750812f, -0.7506484f, -0.8993277f, -0.31180757f, 0.56488705f, -0.09642112f, -0.3939833f, -0.04788232f, -0.021166444f, 0.94966996f, -0.773756f, 0.33981127f, -0.08902931f, -0.48837483f, -0.37468535f, -0.9220379f, -0.790679f, -0.119683504f, -0.29507244f, -0.032848775f, -0.887482f, -0.9157982f, 0.46995288f, -0.8212892f, -0.74874705f, 0.84712315f, -0.4467687f, 0.450831f, 0.063503444f, 0.6089684f, 0.9888575f, 0.3352471f, -0.88371235f, 0.717988f, -0.5210712f, 0.65015614f, -0.32816613f, 0.34066397f, 0.47578263f, 0.37795812f, -0.7733991f, 0.008527935f, -0.7977331f, 0.66438955f, -0.51125556f, 0.9734492f, 0.22261995f, -0.19168544f, -0.66232866f, 0.46119612f, 0.4570179f, 0.6063417f, -0.6003074f, -0.49261487f, -0.056173325f, -0.7787302f, -0.26433617f, 0.25914878f, -0.6214066f, -0.8173274f, 0.51481277f, -0.26305717f, -0.92030185f, -0.31207293f, -0.12262237f, -0.5625734f, -0.6705594f, -0.2393853f, 0.072622836f, -0.49837565f, 0.02233255f, 0.32561702f, 0.6092694f, 0.22012693f, -0.22406238f, 0.4362409f}, {0.85558486f, 0.18047208f, -0.56327456f, -0.7348163f, -0.8962542f, -0.51876515f, 0.43649173f, -0.93879306f, -0.93144023f, 0.91793036f, 0.32136577f, 0.98846626f, -0.47998947f, -0.0852443f, -0.4993257f, 0.840906f, 0.6390162f, -0.48146015f, 0.6084833f, -0.90244144f, -0.09142363f, -0.30257618f, 0.49423617f, 0.82128733f, 0.8937417f, 0.0046844482f, -0.3689487f, 0.97615975f, 0.07373077f, -0.8547186f, 0.9922911f, -0.017233908f, 0.72052014f, -0.08855224f, 0.4402598f, -0.24255568f, -0.5596232f, 0.26278132f, 0.043597937f, -0.42602706f, -0.97098815f, 0.29765874f, -0.24528003f, 0.952342f, -0.030315518f, 0.5260299f, -0.45192146f, -0.7597573f, 0.43219388f, 0.78675276f, 0.43541628f, 0.643343f, 0.088173985f, 0.23096758f, -0.478805f, -0.9293607f, -0.7837245f, -0.04571408f, -0.2543168f, 0.39567995f, 0.52508014f, 0.74177796f, -0.37172776f, 0.5836483f, 0.11031473f, 0.0012804866f, 0.6416207f, -0.32358915f, 0.018542051f, -0.33540744f, -0.36082894f, 0.37910908f, 0.9269673f, 0.9638074f, 0.34628963f, 0.60465497f, -0.037582397f, 0.39457148f, 0.018730104f, -0.9062678f, 0.9236178f, -0.15733993f, -0.56905335f, -0.5972388f, -0.79043645f, -0.021963358f, -0.12798667f, 0.44838035f, 0.8863726f, 0.8212793f, -0.90350026f, 0.84688455f, -0.29609f, 0.6889482f, 0.4507004f, -0.99824536f, 0.5023548f, -0.1219247f, 0.5953444f, -0.03248334f, 0.91168857f, -0.78202355f, -0.044823408f, 0.20891601f, -0.0051854253f, 0.3621723f, -0.38939977f, -0.15297657f, 0.89785033f, -0.16032624f, 0.021685839f, -0.20409101f, 0.86813426f, 0.22765154f, -0.4837932f, 0.5053808f, 0.8539121f, -0.0874691f, -0.8892772f, 0.42396784f, 0.0019703507f, 0.057581127f, 0.36094803f, -0.2549141f, 0.10514152f, -0.15098667f, -0.8758141f, 0.93233806f, -0.16454268f, 0.37862563f, 0.51486814f, -0.648006f, -0.37394512f, 0.032672286f, -0.8781242f, 0.8607067f, -0.53912395f, 0.19003338f, 0.34425503f, -0.16897178f, 0.31710476f, 0.24308765f, -0.92937905f, -0.9152171f, -0.68854713f, 0.73833764f, -0.73098844f, -0.19113266f, 0.7610727f, 0.18352592f, 0.33070564f, 0.122161806f, 0.34216738f, 0.76990217f, 0.07350236f, 0.9231632f, -0.7173576f, -0.14870954f, 0.8412088f, 0.2378614f, -0.72267926f, -0.49959165f, -0.7945868f, -0.7014465f, 0.51003116f, 0.13350433f, -0.5709359f, -0.4986921f, 0.36982143f, -0.78384966f, 0.5931473f, -0.92921966f, -0.5973889f, -0.5569311f, 0.47131395f, -0.63704354f, 0.66800016f, 0.23646402f, -0.95945334f, 0.2132895f, -0.9197936f, -0.2667554f, -0.5675917f, 0.33898813f, -0.5348618f, -0.27530187f, -0.7234067f, 0.49910045f, -0.85573506f, 0.4379375f, 0.3278175f, 0.56944305f, 0.977847f, 0.33829445f, -0.65536094f, 0.25493586f, 0.11813623f, 0.22822362f, -0.81288296f, 0.44060576f}, {0.4757563f, -0.7569548f, -0.38902348f, 0.006033778f, -0.1729368f, 0.304159f, -0.5021663f, 0.5494455f, -0.39236015f, 0.025707245f, 0.18597162f, -0.7693985f, 0.011986554f, 0.600805f, 0.939304f, 0.9600305f, -0.8790828f, 0.4553119f, -0.31131333f, -0.19008934f, 0.36227816f, -0.9284411f, 0.59262335f, -0.25647312f, -0.97379255f, 0.44866443f, -0.04002452f, 0.42976743f, 0.66355246f, -0.28953254f, -0.57476723f, 0.3422739f, -0.85272914f, 0.8872524f, -0.56349343f, 0.10828227f, -0.39630592f, 0.019246101f, 0.11604148f, 0.9118459f, 0.44259953f, -0.36654997f, 0.31580448f, 0.8490791f, 0.5922326f, 0.112793505f, -0.93601716f, -0.7700004f, 0.8498735f, 0.26863146f, 0.48929155f, 0.229208f, -0.6091309f, -0.35288572f, -0.90791816f, -0.42517495f, -0.31431007f, 0.9102855f, -0.7588927f, 0.18471688f, 0.5023079f, -0.10057753f, -0.66032594f, -0.632186f, 0.6437463f, -0.25491107f, -0.4848376f, -0.17220843f, 0.5745101f, -0.862785f, -0.010732055f, 0.810286f, -0.33717948f, 0.92647654f, 0.9131981f, 0.6373432f, 0.9364147f, 0.9997562f, 0.37547034f, 0.5123077f, -0.85317373f, -0.51382256f, 0.14383507f, -0.59106976f, 0.15971017f, -0.1857773f, 0.5505599f, 0.3706752f, 0.73062325f, -0.40359098f, 0.8852699f, 0.34436268f, -0.35479885f, -0.486394f, 0.5079895f, -0.19606477f, -0.518902f, 0.63006f, -0.26601493f, 0.70225084f, -0.25515234f, 0.16543108f, -0.10197574f, 0.15449542f, 0.7244323f, -0.48016793f, 0.22189176f, -0.16791606f, 0.14035088f, 0.58509016f, 0.8297247f, 0.19863075f, -0.23070306f, 0.8420053f, 0.22886997f, -0.95764357f, 0.67983824f, -0.8124073f, -0.04123044f, 0.17907411f, -0.8987689f, 0.5350585f, -0.4009571f, -0.87740636f, 0.029422939f, 0.79535204f, 0.24263936f, -0.3114369f, 0.3052616f, -0.11048418f, -0.2226708f, -0.3618638f, -0.76255745f, 0.22184837f, 0.38771313f, -0.9249626f, 0.8249447f, -0.85969734f, 0.43562537f, 0.22655565f, -0.46842653f, 0.42499965f, -0.30192125f, -0.66848695f, -0.5148433f, 0.019553363f, 0.84876275f, -0.9340741f, 0.09887582f, -0.9477983f, -0.6336936f, -0.59951603f, 0.5069792f, -0.4124056f, -0.0917601f, -0.42499298f, 0.3962118f, -0.6306015f, 0.97736543f, 0.832203f, -0.86674416f, 0.009319544f, 0.5811446f, -0.81433743f, -0.9839052f, -0.33465433f, -0.062345624f, -0.6700052f, 0.12394023f, 0.15472531f, -0.21864748f, 0.50437385f, 0.9522278f, -0.6649415f, 0.15303862f, 0.39880276f, 0.93352145f, -0.44078898f, 0.5913278f, -0.51450217f, -0.020854771f, 0.30564916f, -0.05405265f, -0.16625941f, -0.5730649f, -0.4697848f, -0.69299716f, -0.07903105f, 0.61046404f, 0.83151734f, 0.36522454f, -0.623208f, -0.23400539f, 0.9927487f, -0.43647766f, 0.8136183f, 0.40536284f, -0.10836536f, 0.88099307f, 0.25284034f}, {0.3136624f, -0.16269529f, 0.47622305f, -0.0011562705f, 0.23917377f, 0.6460701f, 0.278651f, -0.5634842f, 0.16509259f, 0.8906787f, 0.110835254f, 0.79788506f, -0.38561094f, 0.51728016f, -0.49000847f, -0.5707475f, -0.011797786f, -0.54297906f, -0.28500682f, 0.41051334f, 0.58637786f, -0.705145f, -0.40099776f, 0.2448116f, -0.98432034f, -0.46769577f, 0.960421f, 0.5451295f, 0.39821804f, -0.9933422f, 0.7737517f, -0.8486548f, 0.4857571f, -0.0890286f, 0.3751412f, -0.6786827f, -0.69115f, -0.7616832f, 0.5356859f, 0.34298724f, -0.34322262f, 0.5575282f, 0.96101916f, 0.9538167f, -0.37991703f, 0.30057877f, -0.83011717f, 0.28367835f, 0.45229375f, 0.19459707f, 0.93865573f, -0.7478368f, 0.72068393f, -0.5076456f, -0.47294837f, -0.8874585f, -0.8714665f, -0.219522f, -0.8594435f, -0.216591f, 0.7550117f, 0.07973522f, -0.7099519f, 0.19167548f, -0.5736559f, 0.49732f, 0.614223f, 0.36404735f, 0.73314077f, 0.5636668f, -0.41918188f, 0.4838878f, 0.31177098f, -0.29567808f, 0.67808473f, -0.43834823f, -0.5986153f, 0.87894464f, 0.15304786f, 0.4270752f, -0.30539554f, 0.2892685f, -0.6108465f, 0.70512307f, 0.8662784f, 0.17574137f, 0.6645797f, -0.5562486f, -0.7056061f, 0.299721f, 0.082738936f, -0.89884f, 0.47567058f, 0.14142954f, 0.81241596f, 0.0722397f, -0.044958472f, 0.50953305f, 0.9448295f, -0.9029793f, -0.45186204f, 0.11894065f, 0.9890464f, 0.10845244f, 0.12967372f, 0.1381988f, -0.11371678f, -0.4598081f, 0.45575047f, -0.65023476f, -0.46684057f, 0.896357f, -0.08105552f, -0.8188394f, -0.29002547f, -0.9605387f, -0.55585545f, -0.30816102f, 0.3063929f, -0.5055075f, 0.48316944f, -0.1636141f, 0.7802347f, 0.6166513f, 0.8036405f, -0.9299907f, 0.7217161f, -0.083865345f, -0.8438155f, -0.25619507f, 0.9413693f, -0.5631628f, -0.44439435f, 0.61590356f, 0.046813726f, 0.77420837f, 0.825826f, 0.059586287f, 0.01808691f, 0.6946224f, -0.8457024f, 0.105709195f, -0.69816405f, 0.73240834f, 0.95571864f, -0.9775675f, 0.39169043f, 0.28461558f, 0.4755401f, -0.39708477f, 0.7776448f, -0.9233568f, 0.76673746f, 0.058045447f, -0.51059884f, 0.68955743f, -0.51201874f, -0.7186095f, -0.210432f, -0.6203215f, -0.58331174f, 0.5765929f, -0.021806419f, -0.6875574f, -0.9168156f, 0.2208786f, 0.5624027f, -0.783514f, 0.40396512f, 0.9884569f, -0.8728618f, 0.25313526f, 0.054319143f, 0.9989762f, -0.93157345f, -0.74365014f, 0.5897049f, -0.48731738f, 0.4038986f, 0.8185711f, 0.18852133f, -0.30958992f, 0.5581056f, -0.86628413f, 0.31492442f, -0.65907764f, 0.69924855f, 0.3226692f, -0.4396872f, -0.09604782f, -0.04740894f, 0.12269837f, 0.98784846f, -0.968968f, -0.7181682f, -0.5977184f, -0.032833815f, -0.18455869f, 0.35087454f, -0.743129f}, {-0.09755319f, -0.07024318f, 0.9742108f, 0.89542913f, 0.9200494f, -0.76493734f, -0.8987684f, -0.37810963f, 0.19459248f, 0.17275602f, 0.7827744f, -0.6026286f, -0.10868448f, 0.019096076f, 0.52981687f, 0.4437139f, -0.9622611f, 0.9596868f, -0.3463574f, 0.44749576f, 0.27744484f, -0.01058346f, 0.11201519f, -0.576478f, -0.5855264f, -0.79071146f, -0.19705307f, 0.7471173f, -0.51242006f, 0.19845146f, -0.99919045f, -0.3737849f, 0.8746602f, -0.17988878f, -0.7658138f, -0.49714512f, -0.24507588f, -0.18873316f, 0.7178505f, -0.84549105f, -0.8506006f, 0.78654796f, -0.098017156f, -0.35433757f, 0.72424436f, -0.5868106f, -0.5288492f, 0.25257725f, 0.7490772f, -0.407458f, -0.9848634f, 0.8127651f, -0.6041409f, 0.063955784f, -0.75840014f, 0.25860417f, 0.6505288f, 0.70856f, -0.030138195f, -0.12446165f, 0.4804411f, 0.0013251305f, -0.042969882f, 0.5697551f, -0.19284642f, -0.68454397f, 0.4218691f, 0.7653031f, -0.45644748f, -0.3246882f, 0.8825814f, 0.48924553f, 0.07397199f, 0.08455062f, -0.42840904f, 0.49689406f, 0.07137799f, 0.39317358f, 0.14706016f, -0.061882436f, 0.3013844f, -0.29228055f, -0.888477f, -0.32524437f, -0.1728074f, 0.055311024f, 0.42975217f, 0.73455304f, 0.3955037f, 0.39879072f, 0.2146877f, -0.907016f, -0.56529236f, -0.23565322f, -0.3932479f, 0.7084254f, 0.004045546f, -0.45626086f, -0.680101f, 0.20412242f, -0.51721245f, -0.6652565f, -0.5016405f, 0.40864176f, -0.6343561f, 0.15100962f, -0.0073227882f, 0.43746096f, 0.45785743f, 0.61930346f, -0.78385186f, -0.7472855f, -0.46075916f, -0.38404322f, -0.5296885f, 0.64056003f, 0.446792f, 0.7751473f, -0.5225561f, -0.10540336f, -0.41394746f, -0.49741662f, -0.44405997f, -0.3639217f, 0.24753058f, -0.55406034f, -0.013233244f, -0.20986438f, 0.009447515f, -0.1346888f, -0.9247678f, 0.33084184f, -0.087551296f, -0.5599668f, -0.7878827f, -0.33083606f, -0.6221914f, -0.9737541f, -0.11822963f, 0.09548825f, 0.43668234f, -0.9784423f, -0.9479291f, 0.4756599f, 0.16422546f, -0.8203298f, -0.28777617f, -0.004018247f, 0.38589114f, -0.04926026f, -0.50085145f, -0.5049066f, 0.37258685f, -0.8003818f, -0.6282159f, -0.009517431f, -0.45850682f, 0.97576725f, 0.8450662f, 0.3463933f, -0.16438103f, -0.6397697f, -0.5196697f, 0.14154011f, 0.9359092f, -0.8843679f, 0.7975963f, -0.7329428f, -0.76608896f, 0.26939207f, 0.24020696f, -0.6810334f, -0.029713333f, -0.6974009f, 0.80905694f, 0.13966751f, -0.5741375f, 0.24411404f, -0.40681398f, 0.3414253f, -0.48248225f, 0.0326882f, -0.26048976f, -0.8465577f, -0.95376235f, 0.713757f, -0.6642264f, -0.006659448f, 0.4289992f, 0.49303633f, 0.9865761f, -0.30215693f, 0.43319654f, 0.93443316f, 0.39115638f, -0.82695603f, -0.60012937f, -0.9589739f, -0.41976076f, 0.21410477f}, {-2.1445751E-4f, -0.5585058f, 0.44344622f, -0.7230815f, 0.20130414f, 0.7480045f, 0.9998186f, -0.042328477f, -0.45806283f, 0.19145536f, -0.20367938f, -0.59990776f, 0.047657132f, -0.75365746f, -0.74339294f, -0.8206648f, -0.047810793f, 0.95393455f, 0.45678043f, -0.8200421f, -0.7878455f, -0.9276167f, 0.11803937f, 0.48269355f, -0.79414934f, 0.037292063f, -0.861135f, 0.738309f, 0.29858536f, 0.7182096f, -0.6153047f, 0.11756337f, 0.2816714f, -0.4908467f, -0.034760714f, -0.34786606f, 0.5819349f, -0.32853752f, -0.6673733f, -0.8315918f, -0.81866485f, -0.7291938f, -0.52606106f, -0.3387329f, -0.7473545f, 0.90752774f, -0.8018106f, 0.14142013f, 0.19544822f, 0.49782425f, 0.18869263f, -0.119517684f, -0.9105763f, -0.037189662f, -0.17893738f, 0.07450539f, -0.49428177f, -0.28533763f, 0.73007786f, 0.60311925f, 0.09131414f, -0.12935603f, 0.9063635f, 0.40272897f, 0.65788406f, -0.42053127f, 0.45309347f, -0.8071886f, -0.44184488f, 0.59518945f, 0.7752139f, 0.68490535f, 0.77358586f, -0.34264565f, 0.46046692f, 0.57012886f, 0.38849276f, 0.9007372f, -0.3125782f, 0.04396987f, -0.28015262f, 0.783048f, -0.84141123f, 0.93341726f, 0.5180477f, -0.8718141f, -0.2947142f, 0.8546287f, -0.5543066f, -0.8466349f, -0.6100303f, 0.9910281f, 0.29114884f, 0.8614951f, 0.11553693f, -0.76725125f, -0.5839799f, 0.23123604f, -0.41502494f, 0.25673956f, -0.9146651f, -0.6434998f, 0.6549249f, -0.74378663f, 0.6853296f, -0.07329857f, 0.29023176f, -0.85010517f, -0.95510304f, -0.14474833f, 0.54137474f, 0.031484663f, 0.47054678f, -0.1581356f, 0.9655259f, 0.051870704f, -0.52507395f, -0.3803715f, 0.9535343f, 0.25020444f, 0.52348953f, -0.48301804f, -0.5076186f, -0.029618084f, -0.124851644f, 0.20445561f, 0.35514754f, 0.01908952f, 0.49017274f, -0.41139287f, 0.31028086f, -0.78441834f, -0.47105134f, 0.7398035f, 0.8079404f, 0.79839253f, -0.5411445f, -0.9065069f, 0.7035252f, -0.61927295f, 0.89446163f, 0.59999245f, 0.7569804f, 0.87223005f, -0.41278112f, -0.5827198f, -0.7012755f, 0.68012697f, -0.13906044f, 0.26701158f, -0.43304044f, -0.6480484f, 0.484532f, 0.5627855f, 0.6570575f, -0.37023395f, 0.6442464f, 0.23775828f, -0.2664979f, -0.6985829f, -0.59914535f, 0.37938434f, -0.8472401f, 0.68865365f, 0.6423168f, 0.80267626f, 0.9573014f, -0.22209018f, -0.5829059f, -0.40918708f, 0.25135922f, -0.79366505f, -0.6532233f, 0.56981575f, -0.0955348f, 0.8466364f, -0.6729165f, 0.57773197f, 0.049055815f, -0.34187466f, -0.20863652f, -0.09759742f, 0.47711158f, -0.9542214f, -0.30845428f, -0.32339537f, -0.6031585f, 0.40380216f, -0.88735175f, 0.2495609f, -0.50912887f, 0.9505208f, -0.9934323f, -0.058739066f, -0.94844246f, -0.006723881f, 0.9940651f, 0.13437992f, -0.34941405f, 0.1560269f}, {-0.18699932f, -0.61751294f, 0.05559641f, -0.6055568f, 0.46355355f, -0.7444243f, 0.6747943f, -0.2443698f, 0.42930704f, -0.42559683f, 0.38992757f, 0.032562077f, -0.8222882f, 0.6561509f, -0.22262055f, -0.40359992f, 0.15947783f, 0.384161f, 0.534337f, -0.72665155f, -0.28951353f, 0.405604f, 0.5000769f, 0.64621323f, -0.932803f, -0.703327f, 0.89609647f, -0.2930774f, 0.34982294f, -0.40230763f, 0.30580735f, -0.9437006f, 0.9942032f, 0.1746108f, 0.76695746f, 0.6942859f, 0.37926197f, 0.49482924f, -0.9583901f, 0.11140168f, -0.41498286f, -0.6204283f, 0.25612402f, -0.62271756f, 0.15699106f, 0.5512977f, -0.3761919f, 0.6194459f, -0.24990863f, -0.50894576f, -0.8656208f, -0.8563339f, -0.3445381f, 0.66815585f, -0.40313238f, 0.755561f, 0.42164403f, -0.9725548f, 0.72758716f, -0.64765275f, -0.26467294f, 0.8704292f, -0.02489096f, 0.8155302f, 0.28957158f, -0.71825516f, 0.77302897f, 0.44707292f, -0.5619347f, 0.41679233f, 0.37008607f, 0.24707967f, -0.110033035f, -0.56822467f, -0.35155898f, 0.51127f, -0.57684296f, 0.07271314f, 0.6409598f, -0.9229776f, -0.8450195f, 0.6188589f, 0.07165748f, 0.19744372f, -0.51582456f, -0.9649579f, -0.36809713f, 0.969126f, -0.026342452f, -0.25656104f, 0.88098395f, -0.99419904f, -0.7488864f, 0.88073653f, -0.63371295f, -0.8234257f, 0.63231695f, -0.51856375f, 0.6562714f, -0.58984154f, -0.81706727f, 0.12477112f, 0.15803647f, 0.45119768f, 0.18398821f, 0.5370636f, 0.82233447f, -0.5288689f, -0.9816971f, -0.29756707f, -0.39332575f, 0.89293975f, 0.51793337f, -0.054950476f, 0.76972234f, -0.25743896f, 0.39749807f, -0.60817015f, 0.02004224f, -0.57020175f, 0.9426685f, -0.25141162f, -0.090548456f, 0.6085964f, 0.24155647f, -0.5846888f, 0.48971766f, -0.025358975f, -0.73569316f, -0.3656928f, -0.90202695f, -0.028039098f, 0.38019747f, -0.29586428f, 0.5090437f, 0.021066308f, 0.18820363f, -0.85729796f, -0.77724856f, -0.091205f, 0.40579432f, 0.44696927f, 0.6097164f, -0.17517358f, -0.6545057f, -0.09090692f, 0.05272627f, 0.11246115f, -0.1255424f, 0.9633164f, -0.19856596f, 0.5568834f, 0.31315798f, 0.78429484f, -0.53224224f, -0.897176f, 0.83423024f, -0.92465776f, -0.7325036f, -0.9199334f, -0.59687805f, -0.7075327f, -0.85652703f, 0.9374564f, -0.9530383f, -0.96375704f, -0.9128163f, 0.49858302f, -0.49824184f, 0.3717506f, 0.058303297f, -0.60233015f, 0.86639655f, 0.4924149f, 0.043341458f, 0.5421874f, 0.20820755f, -0.69574606f, 0.072223425f, -0.12315583f, 0.03893286f, -0.3682295f, -0.9470515f, 0.014138341f, 0.7944957f, -0.88871723f, -0.21923465f, 0.42504072f, 0.7445424f, 0.8653732f, 0.085581005f, 0.13095468f, 0.8768565f, -0.03740275f, 0.9349006f, 0.10504866f, -0.98961055f, -0.0626663f, -0.77622664f, 0.6673025f}, {-0.5062553f, -0.13591015f, -0.2612123f, -0.107978106f, 0.4624192f, -0.012229562f, 0.6509513f, -0.20272684f, -0.70500815f, -0.54651284f, 0.87141913f, 0.90049267f, -0.59076893f, -0.30199677f, 0.7519248f, -0.73587626f, -0.3748979f, 0.12969828f, 0.64741063f, -0.19438511f, -0.039847374f, 0.8753681f, -0.90813005f, -0.34200114f, 0.5303031f, 0.5317471f, -0.079181254f, -0.5197553f, -0.23237574f, 0.22128606f, -0.28756863f, -0.79950714f, 0.06336975f, -0.36812598f, -0.005908847f, -0.19888437f, 0.7230641f, 0.298015f, -0.26959515f, 0.36134535f, -0.49825805f, -0.2909742f, -0.46817768f, -0.52158606f, -0.5094074f, 0.80390525f, -0.031912386f, -0.09701973f, -0.44149512f, 0.17896599f, 0.6908786f, -0.17281592f, 0.61085254f, -0.658424f, -0.49675822f, -0.48099375f, 0.6854649f, -0.9378295f, 0.46631593f, 0.2133205f, -0.49836886f, -0.8067328f, 0.53081584f, 0.15327716f, 0.17206639f, 0.6498037f, 0.45705336f, 0.16410697f, 0.20645225f, -0.7110939f, -0.5433784f, 0.027974129f, -0.27357167f, -0.060314715f, -0.18803018f, -0.9955151f, -0.20959473f, 0.14238703f, 0.8772992f, 0.17557412f, -0.09771514f, 0.64015245f, -0.74747825f, 0.07167232f, -0.3952508f, 0.13501638f, 0.6372584f, -0.15476656f, 0.7740444f, 0.71142906f, 0.46617192f, -0.3511135f, -0.7153314f, 0.21849048f, 0.849879f, -0.71956086f, -0.9285651f, -0.3756004f, 0.09454161f, -0.39434642f, 0.34825677f, -0.28895575f, -0.10022092f, 0.07749277f, 0.8037102f, -0.23183173f, 0.24718225f, -0.97914416f, -0.4536004f, 0.7339646f, 0.03918618f, -0.1246984f, -0.73066556f, -0.12398863f, -0.13428813f, -0.37434626f, 0.85135365f, 0.6737598f, -0.4063667f, 0.33363724f, -0.91108215f, -0.40453523f, 0.8495451f, 0.57294893f, 0.20784366f, 0.43235642f, 0.46286404f, 0.21924525f, 0.71520704f, 0.45362002f, -0.7340122f, 0.0352661f, 0.5603355f, -0.60170174f, 0.97861433f, 0.5592994f, -0.9534644f, -0.44163066f, -0.58552206f, -0.7429431f, -0.2623492f, 0.31219608f, 0.16874862f, -0.79477507f, -0.82851696f, 0.5735001f, -0.7331338f, 0.6146028f, 0.6817236f, 0.5728535f, -0.22352016f, -0.285977f, 0.52483976f, -0.30304343f, -0.24616784f, -0.5839069f, -0.23345828f, -0.7943859f, -0.3263297f, 0.35022593f, -0.64283764f, -0.2556085f, 0.79735446f, -0.8908128f, 0.5793641f, 0.8584902f, -0.30438042f, -0.256881f, 0.93453735f, -0.8473206f, 0.9496278f, 0.38680762f, -0.07655436f, 0.34662056f, 0.30649334f, -0.60548055f, -0.04788524f, 0.83920217f, 0.88609546f, -0.9049004f, -0.80680746f, -0.7915263f, 0.15261441f, -0.76278126f, -0.2366826f, 0.3144499f, -0.85271627f, 0.9951537f, -0.76883245f, -0.06483817f, -0.24954545f, -0.28447783f, 0.2431894f, 0.81714934f, 0.83321637f, 0.5765367f, -0.06546855f, -0.26398212f, 0.2174285f, -0.49738395f}, {-0.8104274f, -0.64070916f, 0.22577584f, -0.30587953f, -0.16785032f, -0.7117035f, -0.6215168f, 0.66785574f, 0.53121495f, 0.5042953f, 0.5410158f, 0.71471107f, 0.58856875f, 0.9314824f, -0.45376194f, -0.4322397f, 0.9909627f, 0.10554755f, -0.39081872f, -0.41476178f, 0.5458609f, 0.71212125f, 0.25874937f, 0.41512525f, 0.41126436f, -0.28785878f, -0.2875123f, -0.92291194f, -0.45085824f, -0.6247859f, -0.048513472f, 0.21118385f, 0.251311f, 0.8104981f, 0.022948325f, 0.906367f, 0.2999255f, -0.60578185f, -0.4007632f, 0.15637594f, -0.47416168f, 0.9598602f, 0.6470077f, 0.89884096f, 0.30412078f, 0.46834618f, 0.38504946f, 0.5643068f, 0.43490142f, 0.49012095f, 0.31506318f, 0.7885302f, 0.3378089f, 0.4567374f, -0.21140581f, -0.35351223f, -0.59771746f, -0.63158095f, -0.5239308f, -0.62865674f, 0.038458586f, -0.20590347f, 0.7459933f, 0.24145645f, 0.5389252f, -0.15497863f, 0.50584114f, 0.571365f, 0.6396551f, 0.7200097f, 0.28828162f, 0.9310215f, -0.9429752f, 0.73005354f, -0.7999624f, 0.9757507f, 0.8693593f, -0.23310804f, 0.25429595f, 0.9652718f, 0.54847246f, -0.06664169f, 0.27100533f, 0.9908049f, -0.49544483f, -0.06522864f, -0.66046333f, 0.17627293f, 0.25123888f, 0.57658356f, 0.09444231f, 0.16405386f, -0.35054386f, 0.83717483f, -0.55258745f, -0.9037474f, -0.82145077f, -0.54472655f, -0.47787142f, -0.87667567f, 0.9182339f, 0.6573031f, -0.77448434f, 0.4093479f, 0.94188195f, -0.047302783f, 0.13805676f, -0.6558752f, 0.8125954f, 0.14356923f, -0.72081035f, 0.1623295f, 0.5242844f, -0.10596371f, 0.803176f, -0.6652991f, 0.7331731f, -0.39412177f, -0.9686125f, -0.9224018f, 0.51093715f, -0.8157529f, 0.25980735f, -0.92427087f, -0.72737014f, 0.26972395f, -0.9321339f, -0.79554296f, 0.61839503f, 0.4352978f, 0.71418583f, -0.056628346f, -0.8423091f, 0.60128593f, -0.9354047f, -0.68855625f, 0.73046815f, 0.6775018f, -0.48726147f, 0.6199447f, -0.49818844f, 0.1857875f, 0.34714955f, 0.83815014f, 0.89746386f, 0.6890186f, 0.3130893f, 0.31591362f, 0.16516697f, 0.6838737f, -0.6725435f, 0.34032398f, 0.14872187f, -0.45678937f, 0.76008385f, -0.63268036f, -0.17580801f, 0.7824037f, 0.74634767f, 0.85584015f, 0.5754745f, 0.6299235f, 0.544668f, 0.71990013f, -0.7551133f, 0.23523474f, 0.42195445f, -0.9175635f, 0.39106244f, 0.9952062f, 0.75684893f, 0.5473044f, -0.6001783f, 0.6455223f, -0.40087593f, -0.51545006f, 0.9255379f, -0.09451103f, 0.26725048f, -0.64755684f, -0.5915013f, -0.10281706f, 0.09720445f, -0.88496584f, 0.7616863f, -0.7224024f, 0.83513534f, 0.99418044f, -0.46797544f, 0.038241267f, -0.6815782f, -0.67471695f, 0.46949768f, -0.29220563f, 0.6869465f, 0.81533617f, -0.5475969f, 0.91102433f, 0.6991821f, 0.91907257f}, {-0.64611864f, 0.3088284f, -0.5849007f, 0.3942352f, -0.8259191f, -0.5896799f, -0.90631545f, -0.49156165f, -0.21831727f, 0.43661386f, 0.6551634f, -0.15696561f, -0.034285486f, 0.54110515f, -0.2200585f, -0.9648248f, -0.21449071f, -0.9005063f, 0.49513853f, 0.5985149f, 0.4898705f, -0.19088358f, 0.9255673f, -0.052902937f, -0.46324807f, 0.20881176f, 0.32940263f, -0.84776986f, 0.81956124f, -0.068072915f, -0.5355302f, 0.061643183f, 0.92559886f, -0.43583328f, -0.23381555f, -0.92227393f, -0.88971126f, 0.5977592f, 0.94631535f, 0.023003936f, -0.6177789f, 0.5526635f, 0.6973386f, 0.97352505f, -0.52379614f, 0.65465754f, 0.7853423f, 0.43904f, 0.3317446f, 0.5444153f, 0.041091204f, 0.073593676f, -0.84000415f, -0.2410425f, -0.09420711f, 0.8113492f, 0.6103668f, -0.3021711f, -0.4641781f, -0.34384328f, -0.29079145f, -0.90228766f, -0.7420937f, -0.3817616f, 0.6843559f, 0.5279332f, -0.7358173f, -0.4765336f, 0.7364345f, 0.7432964f, 0.21400183f, 0.7600529f, 0.32794887f, -0.14085549f, 0.8033011f, 0.95008916f, 0.13460994f, -0.15910512f, -0.66832334f, 0.36446267f, -0.8403899f, -0.9230388f, -0.83532006f, 0.48881292f, 0.67803335f, 0.6429402f, -0.40829742f, 0.85079896f, 0.6102356f, 0.39316916f, 0.470183f, -0.56782734f, -0.46218908f, -0.28500968f, 0.16187733f, 0.95591134f, -0.96951646f, -0.14628333f, 0.28846252f, -0.014023721f, 0.015181065f, 0.8253108f, 0.8145381f, -0.4313116f, -0.2947852f, -0.14793944f, 0.7795981f, -0.0038010478f, 0.27173638f, 0.37373567f, -0.48955804f, 0.992726f, 0.5620836f, -0.7210766f, 0.32198858f, -0.008375466f, 0.82339346f, 0.1607545f, 0.12030417f, 0.46135783f, 0.81285936f, -0.21384352f, -0.9461038f, -0.48744226f, -0.52690494f, 0.9319596f, -0.9090537f, -0.52264315f, -0.2378636f, 0.5866773f, -0.90014833f, 0.38197058f, 0.80288786f, 0.8497501f, -0.31688207f, 0.7782806f, 0.83606046f, 0.40691447f, 0.287807f, -0.70691305f, -0.20675087f, -0.0154390335f, -0.47914958f, 0.017316043f, 0.8555807f, 0.9892147f, -0.29760456f, 0.7946113f, -0.10393131f, -0.975064f, -0.19111675f, -0.88206387f, 0.47374928f, 0.6700788f, 0.79341066f, -0.9896779f, 0.53147197f, 0.8221828f, -0.8582208f, -0.35464567f, 0.4232198f, -0.454742f, 0.2856204f, -0.8461377f, -0.57796973f, -0.7609353f, -0.055544138f, 0.73992825f, 0.521245f, -0.5247247f, 0.5525428f, 0.12760752f, 0.8639272f, -0.24265236f, -0.5910055f, 0.07064164f, -0.30911678f, 0.34432012f, -0.43152833f, -0.16129744f, -0.95453805f, 0.039293468f, 0.21680593f, 0.110458314f, 0.2588054f, 0.35430223f, 0.54936564f, -0.34661388f, 0.786938f, 0.86699456f, 0.38366014f, -0.3808155f, -0.25382966f, 0.4911334f, 0.01148051f, -0.869146f, -0.44395214f, -0.42300636f, -0.682345f, -0.88726103f}, {0.30138934f, 0.019954264f, -0.31946653f, -0.92081654f, -0.85637045f, 0.94930553f, -0.8670956f, 0.47110462f, 0.68279123f, -0.4196363f, -0.03648019f, 0.9769788f, -0.2657817f, 0.68615955f, 0.6053819f, -0.9621555f, -0.99919957f, -0.3081789f, -0.9700303f, -0.93124f, 0.52999866f, 0.8289258f, 0.3485945f, 0.5583276f, 0.8197428f, 0.64673144f, -0.89169455f, 0.13879412f, -0.6031041f, -0.8513675f, 0.96817344f, 0.107893884f, -0.88900733f, 0.7105229f, 0.0632925f, -0.6690427f, 0.77214986f, -0.3087666f, -0.05170989f, 0.22017068f, -0.100949526f, 0.56497866f, -0.089048505f, -0.3182879f, -0.4825402f, 0.48411536f, 0.0035517216f, 0.38041353f, 0.6962581f, 0.03530687f, 0.8632738f, -0.18327671f, 0.83413017f, -0.49066782f, -0.3444454f, 0.49470568f, -0.39019656f, 0.4078356f, 0.6331002f, -0.8463789f, 0.080070674f, 0.6941324f, -0.8547445f, -0.5406205f, 0.3879586f, 0.35138106f, 0.4457963f, -0.47317928f, -0.71043175f, 0.56778675f, -0.4557162f, 0.24943912f, -0.49456662f, 0.79692954f, -0.50019735f, 0.37326586f, -0.95263416f, 0.34379643f, -0.97347736f, 0.9957043f, -0.77634484f, -0.76391286f, 0.17178029f, -0.82499516f, -0.7707219f, -0.07401818f, -0.18009144f, 0.3198923f, 0.48099887f, 0.37136012f, -0.73091495f, 0.21501553f, -0.69550616f, -0.9635696f, 0.75635666f, -0.7599836f, -0.1733318f, 0.52220535f, -0.023822784f, -0.79333043f, -0.06761211f, -0.090445876f, -0.07081807f, -0.9177133f, -0.29362917f, -0.99903387f, 0.6357744f, -0.59468204f, -0.52545965f, -0.8744655f, 0.9195336f, 0.9352838f, 0.5957438f, 0.9595472f, 0.30605704f, 0.3270375f, 0.8202096f, -0.90882546f, -0.6211257f, 0.8083194f, 0.17191112f, -0.07002938f, 0.61424357f, -0.27795774f, -0.28970665f, 0.017547607f, 0.11165011f, 0.21084517f, 0.0213269f, 0.7650938f, -0.20729363f, -0.53963155f, -0.5734495f, -0.6520979f, -0.93381274f, 0.75807124f, -0.36951882f, 0.37199426f, -0.08701861f, -0.10335481f, -0.400621f, 0.9904584f, 0.26506555f, 0.8827628f, 0.19554192f, 0.0877794f, 0.7274422f, 0.6242376f, 0.533208f, -0.35193503f, 0.3791138f, -0.75097835f, 0.6740308f, 0.04757303f, -0.04158634f, 0.9069186f, 0.19624287f, -0.79098064f, -0.18536454f, 0.8929571f, 0.4891386f, 0.9722611f, -0.4672153f, -0.41306973f, -0.57719785f, 0.9833159f, -0.74084854f, -0.4749356f, 0.22739476f, 0.13386637f, 0.6910684f, 0.34147167f, 0.22656369f, -0.7676289f, -0.87914664f, 0.38767666f, 0.30651194f, 0.6268932f, -0.7811126f, 0.081440866f, -0.44164354f, 0.95613426f, -0.35085148f, 0.57749075f, -0.14717448f, -0.18392158f, 0.7463465f, 0.090390086f, -0.96559316f, -0.27727342f, 0.120096624f, -0.29553103f, 0.54483867f, 0.023733914f, -0.79368687f, 0.49630398f, 0.58373934f, 0.5638376f, -0.7116832f, -0.19114399f}, {0.44857675f, 0.4702543f, 0.8014689f, -0.9759096f, 0.449207f, 0.54979414f, -0.7533364f, 0.42505604f, 0.60399544f, 0.3305822f, 0.77909136f, 0.7093248f, 0.21988726f, 0.8890975f, -0.10762274f, 0.22817808f, -0.7672606f, -0.27040154f, 0.3323382f, -0.46196425f, 0.33877617f, -0.25976682f, 0.23805821f, 0.5818091f, 0.44725877f, 0.67504656f, -0.40390778f, -0.0944854f, 0.039717197f, 0.66651064f, -0.7039413f, -0.9450197f, 0.38292748f, 0.7345058f, -0.8086803f, -0.051555395f, -0.9105771f, -0.30518f, 0.92843854f, -0.204997f, 0.21278524f, -0.74064493f, 0.33325607f, 0.63021934f, 0.09588766f, 0.6023319f, -0.63445723f, -0.27613258f, 0.04369229f, -0.83493066f, -0.41929448f, 0.07865274f, 0.47098356f, 0.2931832f, 0.59283406f, 0.023633957f, -0.8758737f, -0.69493574f, -0.7001855f, -0.8260778f, 0.36966836f, -0.65123785f, 0.5773722f, 0.43744147f, -0.091236055f, 0.8979075f, -0.9105852f, -0.3946259f, 0.6974395f, 0.23286653f, -0.67125815f, -0.2322315f, 0.46200848f, 0.94968027f, -0.9383463f, -0.79392713f, -0.51230353f, 0.75012225f, 0.3193885f, 0.29928732f, 0.38673997f, 0.21721345f, -0.038374722f, -0.44920772f, -0.40521306f, -0.93507147f, 0.77113926f, -0.6860192f, 0.3106838f, 0.25303626f, 0.47794366f, -0.96367764f, 0.2621566f, -0.50892246f, -0.8081079f, 0.028914094f, 0.5376002f, -0.24988055f, -0.13299692f, 0.26598853f, 0.23993218f, -0.6192329f, -0.90136003f, -0.6156973f, 0.8900094f, 0.6137827f, -0.80497164f, -0.9435437f, -0.037636578f, 0.35847676f, -0.19271153f, 0.50248647f, -0.9249245f, -0.89393634f, -0.27767277f, -0.81244177f, -0.79590106f, -0.22725254f, 0.94457775f, -0.36171967f, 0.66209775f, -0.5575761f, 0.38372964f, -0.024834692f, 0.20590496f, -0.6554137f, 0.3529209f, -0.9866388f, -0.03180951f, -0.34817553f, -0.6001668f, 0.2644812f, 0.6601983f, 0.9444032f, 0.8678264f, 0.62810886f, 0.4992321f, -0.21523774f, 0.9426192f, 0.8312779f, 0.52736455f, 0.24407196f, 0.41624057f, 0.5895556f, 0.5723998f, 0.053963006f, 0.17772466f, -0.6655485f, 0.8825556f, 0.4272647f, -0.17139953f, -0.7558018f, -0.15081578f, 0.7430721f, 0.62322253f, -0.61287206f, 0.27592885f, -0.9754519f, -0.7634817f, 0.98158324f, 0.9217279f, -0.21906805f, -0.055292368f, -0.48023307f, -0.37101877f, -0.23869115f, 0.07601458f, 0.5155271f, 0.26110333f, 0.575217f, -0.49266183f, -0.6842724f, 0.53507364f, 0.6831982f, -0.022567034f, 0.88537234f, 0.3463356f, -0.42352974f, 0.87701637f, 0.54242253f, -0.713389f, -0.9898089f, 0.9482586f, -0.92021376f, 0.43771207f, -0.008024693f, -0.91924065f, 0.5077068f, -0.16966873f, 0.116613805f, -0.550617f, 0.8355522f, -0.5356766f, -0.80755395f, -0.631025f, -0.89798456f, -0.9244456f, -0.6890462f, 0.46431488f, 0.55693024f}};


    private final static String[] STOPWORDARRY = new String[]{"?", "、", "。", "“", "”", "《", "》", "！", "，", "：", "；", "？", "啊", "阿", "哎", "哎呀", "哎哟", "唉", "俺",
            "俺们", "按", "按照", "吧", "吧哒", "把", "罢了", "被", "本", "本着", "比", "比方", "比如", "鄙人", "彼", "彼此", "边", "别", "别的", "别说", "并", "并且", "不比", "不成",
            "不单", "不但", "不独", "不管", "不光", "不过", "不仅", "不拘", "不论", "不怕", "不然", "不如", "不特", "不惟", "不问", "不只", "朝", "朝着", "趁", "趁着", "乘", "冲",
            "除", "除此之外", "除非", "除了", "此", "此间", "此外", "从", "从而", "打", "待", "但", "但是", "当", "当着", "到", "得", "的", "的话", "等", "等等", "地", "第", "叮咚",
            "对", "对于", "多", "多少", "而", "而况", "而且", "而是", "而外", "而言", "而已", "尔后", "反过来", "反过来说", "反之", "非但", "非徒", "否则", "嘎", "嘎登", "该", "赶",
            "个", "各", "各个", "各位", "各种", "各自", "给", "根据", "跟", "故", "故此", "固然", "关于", "管", "归", "果然", "果真", "过", "哈", "哈哈", "呵", "和", "何", "何处",
            "何况", "何时", "嘿", "哼", "哼唷", "呼哧", "乎", "哗", "还是", "还有", "换句话说", "换言之", "或", "或是", "或者", "极了", "及", "及其", "及至", "即", "即便", "即或",
            "即令", "即若", "即使", "几", "几时", "己", "既", "既然", "既是", "继而", "加之", "假如", "假若", "假使", "鉴于", "将", "较", "较之", "叫", "接着", "结果", "借", "紧接着",
            "进而", "尽", "尽管", "经", "经过", "就", "就是", "就是说", "据", "具体地说", "具体说来", "开始", "开外", "靠", "咳", "可", "可见", "可是", "可以", "况且", "啦", "来",
            "来着", "离", "例如", "哩", "连", "连同", "两者", "了", "临", "另", "另外", "另一方面", "论", "嘛", "吗", "慢说", "漫说", "冒", "么", "每", "每当", "们", "莫若", "某",
            "某个", "某些", "拿", "哪", "哪边", "哪儿", "哪个", "哪里", "哪年", "哪怕", "哪天", "哪些", "哪样", "那", "那边", "那儿", "那个", "那会儿", "那里", "那么", "那么些",
            "那么样", "那时", "那些", "那样", "乃", "乃至", "呢", "能", "你", "你们", "您", "宁", "宁可", "宁肯", "宁愿", "哦", "呕", "啪达", "旁人", "呸", "凭", "凭借", "其", "其次",
            "其二", "其他", "其它", "其一", "其余", "其中", "起", "起见", "起见", "岂但", "恰恰相反", "前后", "前者", "且", "然而", "然后", "然则", "让", "人家", "任", "任何", "任凭",
            "如", "如此", "如果", "如何", "如其", "如若", "如上所述", "若", "若非", "若是", "啥", "上下", "尚且", "设若", "设使", "甚而", "甚么", "甚至", "省得", "时候", "什么",
            "什么样", "使得", "是", "是的", "首先", "谁", "谁知", "顺", "顺着", "似的", "虽", "虽然", "虽说", "虽则", "随", "随着", "所", "所以", "他", "他们", "他人", "它", "它们",
            "她", "她们", "倘", "倘或", "倘然", "倘若", "倘使", "腾", "替", "通过", "同", "同时", "哇", "万一", "往", "望", "为", "为何", "为了", "为什么", "为着", "喂", "嗡嗡", "我",
            "我们", "呜", "呜呼", "乌乎", "无论", "无宁", "毋宁", "嘻", "吓", "相对而言", "像", "向", "向着", "嘘", "呀", "焉", "沿", "沿着", "要", "要不", "要不然", "要不是", "要么",
            "要是", "也", "也罢", "也好", "一", "一般", "一旦", "一方面", "一来", "一切", "一样", "一则", "依", "依照", "矣", "以", "以便", "以及", "以免", "以至", "以至于", "以致",
            "抑或", "因", "因此", "因而", "因为", "哟", "用", "由", "由此可见", "由于", "有", "有的", "有关", "有些", "又", "于", "于是", "于是乎", "与", "与此同时", "与否", "与其",
            "越是", "云云", "哉", "再说", "再者", "在", "在下", "咱", "咱们", "则", "怎", "怎么", "怎么办", "怎么样", "怎样", "咋", "照", "照着", "者", "这", "这边", "这儿", "这个",
            "这会儿", "这就是说", "这里", "这么", "这么点儿", "这么些", "这么样", "这时", "这些", "这样", "正如", "吱", "之", "之类", "之所以", "之一", "只是", "只限", "只要",
            "只有", "至", "至于", "诸位", "着", "着呢", "自", "自从", "自个儿", "自各儿", "自己", "自家", "自身", "综上所述", "总的来看", "总的来说", "总的说来", "总而言之",
            "总之", "纵", "纵令", "纵然", "纵使", "遵照", "作为", "兮", "呃", "呗", "咚", "咦", "喏", "啐", "喔唷", "嗬", "嗯", "嗳", "什么时候", "多少钱", "好", "", "。", "，", "、", "＇", "：", "∶", "；", "?",
            "‘", "’", "“", "”", "〝", "〞", "ˆ", "ˇ", "﹕", "︰", "﹔", "﹖", "﹑", "·", "¨", "…", ".", "¸", ";", "！", "´", "？", "！", "～", "—", "ˉ", "｜", "‖", "＂", "〃",
            "｀", "@", "﹫", "¡", "¿", "﹏", "﹋", "﹌", "︴", "々", "﹟", "#", "﹩", "$", "﹠", "&", "﹪", "%", "*", "﹡", "﹢", "﹦", "﹤", "‐", "￣", "¯", "―", "﹨", "ˆ", "˜", "﹍", "﹎",
            "+", "=", "<", "", "＿", "_", "-", "\\", "ˇ", "~", "﹉", "﹊", "（", "）", "〈", "〉", "‹", "›", "﹛", "﹜", "『", "』", "〖", "〗", "［", "］", "《", "》", "〔", "〕", "{", "}",
            "「", "」", "【", "】", "︵", "︷", "︿", "︹", "︽", "_", "﹁", "﹃", "︻", "", "", "", "︶", "︸", "﹀", "︺", "︾", "ˉ", "﹂", "﹄", "︼", ",", "(", ")", "!", "+", "-", "±",
            "×", "÷", "＝", "≠", "≡", "≌", "≈", "＜", "＞", "≮", "≯", "≤", "≥", "%", "‰", "∞", "∝", "√", "∵", "∴", "∷", "∠", "⌒", "⊙", "○", "π", "△", "⊥", "∪", "∩",
            "∫", "∑", "°", "′", "″", "℃", "{", "}", "(", ")", "()", "[", "]", "[]", ".", "|", "&", "*", "/", "//", "#", "~", ".", ",", ":", ";", "?", "!", "'", "-", "--", "...", "\"", "\"\"",
            "‖", "&", "～", "§", "→", "www", "com", "cn", "是什么", "意思"};

    private final static String[] CITYWORDARRY = new String[]{"北京市", "上海市", "天津市", "重庆市", "黑龙江省", "哈尔滨市", "齐齐哈尔市", "鸡西市", "鹤岗市", "双鸭山市",
            "大庆市", "伊春市", "佳木斯市", "七台河市", "牡丹江市", "黑河市", "绥化市", "大兴安岭地区", "吉林省", "长春市", "吉林市", "四平市", "辽源市", "通化市", "白山市",
            "松原市", "白城市", "延边朝鲜族自治州", "辽宁省", "沈阳市", "大连市", "鞍山市", "抚顺市", "本溪市", "丹东市", "锦州市", "营口市", "阜新市", "辽阳市", "盘锦市",
            "铁岭市", "朝阳市", "葫芦岛市", "山东省", "济南市", "青岛市", "淄博市", "枣庄市", "东营市", "烟台市", "潍坊市", "济宁市", "泰安市", "威海市", "日照市", "莱芜市",
            "临沂市", "德州市", "聊城市", "滨州市", "菏泽市", "山西省", "太原市", "大同市", "阳泉市", "长治市", "晋城市", "朔州市", "晋中市", "运城市", "忻州市", "临汾市",
            "吕梁市", "陕西省", "西安市", "铜川市", "宝鸡市", "咸阳市", "渭南市", "延安市", "汉中市", "榆林市", "安康市", "商洛市", "河北省", "石家庄市", "唐山市", "秦皇岛市",
            "邯郸市", "邢台市", "保定市", "张家口市", "承德市", "沧州市", "廊坊市", "衡水市", "河南省", "郑州市", "开封市", "洛阳市", "平顶山市", "安阳市", "鹤壁市", "新乡市",
            "焦作市", "济源市", "濮阳市", "许昌市", "漯河市", "三门峡市", "南阳市", "商丘市", "信阳市", "周口市", "驻马店市", "湖北省", "武汉市", "黄石市", "十堰市", "宜昌市",
            "襄樊市", "鄂州市", "荆门市", "孝感市", "荆州市", "黄冈市", "咸宁市", "随州市", "恩施土家族苗族自治州", "仙桃市", "潜江市", "天门市", "神农架林区", "湖南省", "长沙市",
            "株洲市", "湘潭市", "衡阳市", "邵阳市", "岳阳市", "常德市", "张家界市", "益阳市", "郴州市", "永州市", "怀化市", "娄底市", "湘西土家族苗族自治州", "海南省", "海口市",
            "三亚市", "五指山市", "琼海市", "儋州市", "文昌市", "万宁市", "东方市", "定安县", "屯昌县澄迈县", "临高县", "白沙黎族自治县", "昌江黎族自治县", "乐东黎族自治县",
            "陵水黎族自治县", "保亭黎族苗族自治县", "琼中黎族苗族自治县", "江苏省", "南京市", "无锡市", "徐州市", "常州市", "苏州市", "南通市", "连云港市", "淮安市", "盐城市",
            "扬州市", "镇江市", "泰州市", "宿迁市", "江西省", "南昌市", "景德镇市", "萍乡市", "九江市", "新余市", "鹰潭市", "赣州市", "吉安市", "宜春市", "抚州市", "上饶市",
            "广东省", "广州市", "韶关市", "深圳市", "珠海市", "汕头市", "佛山市", "江门市", "湛江市", "茂名市", "肇庆市", "惠州市", "梅州市", "汕尾市", "河源市", "阳江市", "清远市",
            "东莞市", "中山市", "潮州市", "揭阳市", "云浮市", "广西省", "南宁市", "柳州市", "桂林市", "梧州市", "北海市", "防城港市", "钦州市", "贵港市", "玉林市", "百色市", "贺州市",
            "河池市", "来宾市", "崇左市", "云南省", "昆明市", "曲靖市", "玉溪市", "保山市", "昭通市", "丽江市", "思茅市", "临沧市", "楚雄彝族自治州", "红河哈尼族彝族自治州",
            "文山壮族苗族自治州", "西双版纳傣族自治州", "大理白族自治州", "德宏傣族景颇族自治州", "怒江傈僳族自治州", "迪庆藏族自治州", "贵州省", "贵阳市", "六盘水市", "遵义市",
            "安顺市", "铜仁地区", "毕节地区", "黔西南布依族苗族自治州", "黔东南苗族侗族自治州", "黔南布依族苗族自治州", "四川省", "成都市", "自贡市", "攀枝花市", "泸州市",
            "德阳市", "绵阳市", "广元市", "遂宁市", "内江市", "乐山市", "南充市", "眉山市", "宜宾市", "广安市", "达州市", "雅安市", "巴中市", "资阳市", "阿坝藏族羌族自治州",
            "甘孜藏族自治州", "凉山彝族自治州", "内蒙古", "呼和浩特市", "包头市", "乌海市", "赤峰市", "通辽市", "鄂尔多斯市", "呼伦贝尔市", "巴彦淖尔市", "乌兰察布市", "兴安盟",
            "锡林郭勒盟", "阿拉善盟", "宁夏", "银川市", "石嘴山市", "吴忠市", "固原市", "中卫市", "甘肃省", "兰州市", "嘉峪关市", "金昌市", "白银市", "天水市", "武威市", "张掖市",
            "平凉市", "酒泉市", "庆阳市", "定西市", "陇南市", "临夏回族自治州", "甘南藏族自治州", "青海省", "西宁市", "海东地区", "海北藏族自治州", "黄南藏族自治州",
            "海南藏族自治州", "果洛藏族自治州", "玉树藏族自治州", "海西蒙古族藏族自治州", "西藏", "拉萨市", "昌都地区", "山南地区", "日喀则地区", "那曲地区", "阿里地区",
            "林芝地区", "新疆", "乌鲁木齐", "乌鲁木齐市", "克拉玛依市", "吐鲁番地区", "哈密地区", "昌吉回族自治州", "博尔塔拉蒙古自治州", "巴音郭楞蒙古自治州", "阿克苏地区",
            "克孜勒苏柯尔克孜自治州", "喀什地区和田地区", "伊犁哈萨克自治州", "塔城地区", "阿勒泰地区", "石河子市阿拉尔市", "图木舒克市五家渠市", "安徽省", "合肥市", "芜湖市",
            "蚌埠市", "淮南市", "马鞍山市", "淮北市", "铜陵市", "安庆市", "黄山市", "滁州市", "阜阳市", "宿州市", "巢湖市", "六安市", "亳州市", "池州市", "宣城市", "浙江省", "杭州市",
            "宁波市", "温州市", "嘉兴市", "湖州市", "绍兴市", "金华市", "衢州市", "舟山市", "台州市", "丽水市", "福建省", "福州市", "厦门市", "莆田市", "三明市", "泉州市", "漳州市",
            "南平市", "龙岩市", "宁德市", "台湾省", "台北市", "高雄市", "基隆市", "台中市", "台南市", "新竹市", "嘉义市", "香港市", "澳门市"};
    private static int[] toInt = new int[128];

    static {
        for (int i = 0; i < ALPHABET.length; i++) {
            toInt[ALPHABET[i]] = i;
        }
    }

    static {
        for (String s : STOPWORDARRY) {
            STOPWORD.add(s);
        }
    }

    static {
        for (String s : CITYWORDARRY) {
            CITYWORD.add(s);

            if (s.endsWith("省") || s.endsWith("市")) {
                CITYWORD.add(s.substring(0, s.length() - 1));
            }
        }
    }

    public static boolean isNumeric(String str) {
        Pattern pattern = Pattern.compile("-?[0-9]+.?[0-9]+");
        Matcher isNum = pattern.matcher(str);
        if (!isNum.matches()) {
            return false;
        }
        return true;
    }

    public static float getInnerProduct(float[] v1, float[] v2) {
        float ret = 0;
        for (int i = 0; i < 200; i++) {
            ret += v1[i] * v2[i];
        }
        return ret;
    }

    protected static boolean[] getLSHBoolenList(float[] feature) {
        boolean[] ret = new boolean[12];
        for (int i = 0; i < 12; i++) {
            float temp = getInnerProduct(LSH_VECTORS[i], feature);
            ret[i] = (temp > 0);
        }
        return ret;
    }

    protected static int getBooleanListValue(boolean[] feature) {
        int ret = 0;
        for (int i = 0; i < 12; i++) {
            if (feature[i]) {
                ret |= 1;
            }
            ret = ret << 1;
        }
        return ret;
    }

    public static int getLSH(float[] feature) {
        boolean[] bools = getLSHBoolenList(feature);
        return getBooleanListValue(bools);
    }

    public static HashSet<Integer> getLSHList(float[] feature) {
        boolean[] bools = getLSHBoolenList(feature);
        HashSet<Integer> ret = new HashSet<Integer>();
        ret.add(getBooleanListValue(bools));
        for (int i = 0; i < 12; i++) {
            for (int j = i + 1; j < 12; j++) {
                bools[i] = !bools[i];
                ret.add(getBooleanListValue(bools));
                bools[i] = !bools[i];

                bools[j] = !bools[j];
                ret.add(getBooleanListValue(bools));
                bools[j] = !bools[j];

                bools[i] = !bools[i];
                bools[j] = !bools[j];
                ret.add(getBooleanListValue(bools));
                bools[i] = !bools[i];
                bools[j] = !bools[j];
            }
        }
        return ret;
    }

    /**
     * Translates the specified byte array into Base64 string.
     *
     * @param buf the byte array (not null)
     * @return the translated Base64 string (not null)
     */
    public static String base64Encode(byte[] buf) {
        int size = buf.length;
        char[] ar = new char[((size + 2) / 3) * 4];
        int a = 0;
        int i = 0;
        while (i < size) {
            byte b0 = buf[i++];
            byte b1 = (i < size) ? buf[i++] : 0;
            byte b2 = (i < size) ? buf[i++] : 0;

            int mask = 0x3F;
            ar[a++] = ALPHABET[(b0 >> 2) & mask];
            ar[a++] = ALPHABET[((b0 << 4) | ((b1 & 0xFF) >> 4)) & mask];
            ar[a++] = ALPHABET[((b1 << 2) | ((b2 & 0xFF) >> 6)) & mask];
            ar[a++] = ALPHABET[b2 & mask];
        }
        switch (size % 3) {
            case 1:
                ar[--a] = '=';
            case 2:
                ar[--a] = '=';
        }
        return new String(ar);
    }

    /**
     * Translates the specified Base64 string into a byte array.
     *
     * @param s the Base64 string (not null)
     * @return the byte array (not null)
     */
    public static byte[] base64Decode(String s) {
        int delta = s.endsWith("==") ? 2 : s.endsWith("=") ? 1 : 0;
        byte[] buffer = new byte[s.length() * 3 / 4 - delta];
        int mask = 0xFF;
        int index = 0;
        for (int i = 0; i < s.length(); i += 4) {
            int c0 = toInt[s.charAt(i)];
            int c1 = toInt[s.charAt(i + 1)];
            buffer[index++] = (byte) (((c0 << 2) | (c1 >> 4)) & mask);
            if (index >= buffer.length) {
                return buffer;
            }
            int c2 = toInt[s.charAt(i + 2)];
            buffer[index++] = (byte) (((c1 << 4) | (c2 >> 2)) & mask);
            if (index >= buffer.length) {
                return buffer;
            }
            int c3 = toInt[s.charAt(i + 3)];
            buffer[index++] = (byte) (((c2 << 6) | c3) & mask);
        }
        return buffer;
    }

    //byte 数组与 long 的相互转换
    public static byte[] longToBytes(long x) {
        ByteBuffer buffer = ByteBuffer.allocate(8);
        buffer.putLong(0, x);
        return buffer.array();
    }

    public static long bytesToLong(byte[] bytes) {
        ByteBuffer buffer = ByteBuffer.allocate(8);
        buffer.put(bytes, 0, bytes.length);
        buffer.flip();//need flip
        return buffer.getLong();
    }

    //byte 数组与 float 的相互转换
    public static byte[] floatToBytes(float x) {
        ByteBuffer buffer = ByteBuffer.allocate(4);
        buffer.putFloat(0, x);
        return buffer.array();
    }

    public static float bytesToFloat(byte[] bytes) {
        ByteBuffer buffer = ByteBuffer.allocate(4);
        buffer.put(bytes, 0, bytes.length);
        buffer.flip();//need flip
        return buffer.getFloat();
    }

    public static int binarySearch(long id, long[] ids, int minId,
                                   int maxId) {

        if (minId > maxId) {
            return -1;
        }

        if (minId == maxId) {
            if (minId < ids.length && id == ids[minId])
                return minId;
            else
                return -1;
        }

        int pivot = (maxId + minId) / 2;

        if (id == ids[pivot]) {
            return pivot;
        } else if (id < ids[pivot]) {
            return binarySearch(id, ids, minId, pivot - 1);
        } else if (id > ids[pivot]) {
            return binarySearch(id, ids, pivot + 1, maxId);
        }

        return -1; // impossible
    }

    public static void quickSort(long[] ids, float[] weights, int start, int end) {
        int i = start, j = end;
        long key = ids[start];
        float value = weights[start];

        while (i < j) {
            /*按j--方向遍历目标数组，直到比key小的值为止*/
            while (j > i && ids[j] >= key) {
                j--;
            }
            if (i < j) {
                /*targetArr[i]已经保存在key中，可将后面的数填入*/
                ids[i] = ids[j];
                weights[i] = weights[j];
                i++;
            }
            /*按i++方向遍历目标数组，直到比key大的值为止*/
            while (i < j && ids[i] <= key) {
                /*此处一定要小于等于零，假设数组之内有一亿个1，0交替出现的话，而key的值又恰巧是1的话，那么这个小于等于的作用就会使下面的if语句少执行一亿次。*/
                i++;
            }
            if (i < j) {
                /*targetArr[j]已保存在targetArr[i]中，可将前面的值填入*/
                ids[j] = ids[i];
                weights[j] = weights[i];
                j--;
            }
        }

        /*此时i==j*/
        ids[i] = key;
        weights[i] = value;

        /*递归调用，把key前面的完成排序*/
        if (start < i - 1) {
            quickSort(ids, weights, start, i - 1);
        }

        /*递归调用，把key后面的完成排序*/
        if (j + 1 < end) {
            quickSort(ids, weights, j + 1, end);
        }
    }
}

